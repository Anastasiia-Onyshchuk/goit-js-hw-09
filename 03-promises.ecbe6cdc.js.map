{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,QAC7BC,MAAOF,SAASC,cAAc,wBAC9BE,KAAMH,SAASC,cAAc,wBAC7BG,OAAQJ,SAASC,cAAc,2BA+BjC,SAASI,EAAcC,EAAUJ,GAE/B,OAAO,IAAIK,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEF,E,MAAUJ,IAEpBO,EAAO,C,SAAEH,E,MAAUJ,GAAQ,GAE5BA,EAAM,G,CAtCbJ,EAAKC,KAAKe,iBAAiB,UAAWC,IACpCA,EAAIC,iBACJ,IAAIC,EAAaC,SAASpB,EAAKI,MAAMiB,OACrC,MAAMC,EAAYF,SAASpB,EAAKK,KAAKgB,OAC/BE,EAAcH,SAASpB,EAAKM,OAAOe,OAEzC,IAAIG,EAAQ,GAEZ,SAASC,EAAcC,GACrBA,EACGC,MAAK,EAACnB,SAAEA,EAAQJ,MAAEA,MAClBwB,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAqBtB,QAAiBJ,OAC3DoB,IACFO,QAAQC,WAAWJ,EAAA9B,GAAS+B,QACxBL,GAASD,GACXE,EAAclB,EAAciB,EAAOpB,GAASoB,EAAQ,GAAKF,GAAW,IAGvEW,OAAM,EAACzB,SAAEA,EAAQJ,MAAEA,MAClBwB,EAAA9B,GAAS+B,OAAOK,QAAQ,sBAAoB1B,QAAeJ,OAC3DoB,IACIA,GAASD,GACXE,EAAclB,EAAciB,EAAOpB,GAASoB,EAAQ,GAAKF,GAAW,G,CAI5EG,CAAclB,EAAciB,EAAOL,GAAY","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst refs = {\n  form: document.querySelector('form'),\n  delay: document.querySelector('input[name =\"delay\"]'), \n  step: document.querySelector('input[name = \"step\"]'),\n  amount: document.querySelector('input[name = \"amount\"]'),\n}\n\nrefs.form.addEventListener('submit', (evt) => {\n  evt.preventDefault()\n  let delayValue = parseInt(refs.delay.value);\n  const stepValue = parseInt(refs.step.value);\n  const amountValue = parseInt(refs.amount.value);\n  const promises = [];\n  let count = 1;\n\n  function handlePromise(promise) {\n    promise\n      .then(({ position, delay }) => {\n       Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        count++;\n        console.log(typeof Notiflix.Notify);\n        if (count <= amountValue) {\n          handlePromise(createPromise(count, delay + (count - 1) * stepValue));\n        }\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        count++;\n        if (count <= amountValue) {\n          handlePromise(createPromise(count, delay + (count - 1) * stepValue));\n        }\n      });\n  }\n  handlePromise(createPromise(count, delayValue));\n})\nfunction createPromise(position, delay) {\n\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay })\n      } else {\n        reject({ position, delay })\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","$47d4ff9957288465$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","delayValue","parseInt","value","stepValue","amountValue","count","handlePromise","promise","then","$parcel$interopDefault","Notify","success","console","log","catch","failure"],"version":3,"file":"03-promises.ecbe6cdc.js.map"}