{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,QAC7BC,MAAOF,SAASC,cAAc,wBAC9BE,KAAMH,SAASC,cAAc,wBAC7BG,OAAQJ,SAASC,cAAc,2BAmBjC,SAASI,EAAcC,G,IAAEC,EAAFD,EAAEC,SAAUL,EAAZI,EAAYJ,MAC3BM,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEL,SAAUA,EAAUL,MAAOA,IAErCW,EAAO,CAAEN,SAAUA,EAAUL,MAAOA,G,GAErCA,E,IAGP,SAASa,EAAUT,G,IAAEC,EAAFD,EAAEC,SAAUL,EAAZI,EAAYJ,MAC7Bc,EAAApB,GAASqB,OAAOC,QAAQ,uBAAwCC,OAAfZ,EAAS,QAAYY,OAANjB,EAAM,M,CAGxE,SAASkB,EAAQd,G,IAAEC,EAAFD,EAAEC,SAAUL,EAAZI,EAAYJ,MAC3Bc,EAAApB,GAASqB,OAAOI,QAAQ,sBAAqCF,OAAfZ,EAAS,QAAYY,OAANjB,EAAM,M,CAjCrEJ,EAAKC,KAAKuB,iBAAiB,UAAU,SAACC,GACpCA,EAAIC,iBAQN,SAA2BlB,GACzB,I,IAD2BJ,EAAFI,EAAEJ,MAAOC,EAATG,EAASH,KAAMC,EAAfE,EAAeF,OAC/BG,EAAW,EAAGA,GAAYH,EAAQG,IACzCF,EAAc,CAAEE,WAAUL,UAASuB,KAAKV,GAAWW,MAAMN,GACzDlB,GAASC,C,CANXwB,CAAkB,CAACzB,MAJF0B,SAAS9B,EAAKI,MAAM2B,OAIC1B,KAHpByB,SAAS9B,EAAKK,KAAK0B,OAGkBzB,OAFnCwB,SAAS9B,EAAKM,OAAOyB,Q","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix, { Notify } from \"notiflix\";\n\nconst refs = {\n  form: document.querySelector('form'),\n  delay: document.querySelector('input[name =\"delay\"]'), \n  step: document.querySelector('input[name = \"step\"]'),\n  amount: document.querySelector('input[name = \"amount\"]'),\n}\n\nrefs.form.addEventListener('submit', (evt) => {\n  evt.preventDefault();\n  let delayValue = parseInt(refs.delay.value);\n  const stepValue = parseInt(refs.step.value);\n  const amountValue = parseInt(refs.amount.value);\n\n  createNewPromises({delay: delayValue, step: stepValue, amount: amountValue});\n});\n\nfunction createNewPromises({ delay, step, amount }) {\n  for (let position = 1; position <= amount; position++) {\n    createPromise({ position, delay }).then(onSuccess).catch(onError);\n    delay += step;\n  }\n}\n\nfunction createPromise({ position, delay }) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position: position, delay: delay });\n      } else {\n        reject({ position: position, delay: delay });\n      }\n    }, delay);\n  });\n}\nfunction onSuccess({ position, delay }) {\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n};\n\nfunction onError({ position, delay }) {\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n}\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","param","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$ce04d3a99e08e73b$var$onSuccess","$parcel$interopDefault","Notify","success","concat","$ce04d3a99e08e73b$var$onError","failure","addEventListener","evt","preventDefault","then","catch","$ce04d3a99e08e73b$var$createNewPromises","parseInt","value"],"version":3,"file":"03-promises.c167e1bb.js.map"}