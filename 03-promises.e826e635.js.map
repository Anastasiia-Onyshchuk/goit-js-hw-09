{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,QAC7BC,MAAOF,SAASC,cAAc,wBAC9BE,KAAMH,SAASC,cAAc,wBAC7BG,OAAQJ,SAASC,cAAc,2BA8BjC,SAASI,EAAcC,EAAUJ,GAE/B,OAAO,IAAIK,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEF,E,MAAUJ,IAEpBO,EAAO,CAAC,C,SAAEH,E,MAAUJ,IAAS,GAE9BA,EAAM,G,CArCbJ,EAAKC,KAAKe,iBAAiB,UAAWC,IACpCA,EAAIC,iBACeC,SAASnB,EAAKI,MAAMgB,OACrBD,SAASnB,EAAKK,KAAKe,OACjBD,SAASnB,EAAKM,OAAOc,OAEzC,IAAIC,EAAQ,GAEZ,SAASC,EAAcC,GACrBA,EACGC,MAAK,EAAChB,SAAEA,EAAQJ,MAAEA,MACjBqB,EAAA3B,GAAS4B,OAAOC,QAAQ,uBAAqBnB,QAAiBJ,OAC5DiB,IACEA,GAASf,QACXgB,EAAcf,EAAcc,EAAOjB,GAASiB,EAAQ,GAAKhB,MAAM,IAGlEuB,OAAM,EAACpB,SAAEA,EAAQJ,MAAEA,MAClBqB,EAAA3B,GAAS4B,OAAOG,QAAQ,sBAAoBrB,QAAeJ,OAC3DiB,IACIA,GAASf,QACXgB,EAAcf,EAAcc,EAAOjB,GAASiB,EAAQ,GAAKhB,MAAM,G,CAIvEiB,CAAcf,EAAcc,EAAOrB,EAAKI,OAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst refs = {\n  form: document.querySelector('form'),\n  delay: document.querySelector('input[name =\"delay\"]'), \n  step: document.querySelector('input[name = \"step\"]'),\n  amount: document.querySelector('input[name = \"amount\"]'),\n}\n\nrefs.form.addEventListener('submit', (evt) => {\n  evt.preventDefault()\n  const delayValue = parseInt(refs.delay.value);\n  const stepValue = parseInt(refs.step.value);\n  const amountValue = parseInt(refs.amount.value);\n  const promises = [];\n  let count = 1;\n\n  function handlePromise(promise) {\n    promise\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        count++;\n        if (count <= amount) {\n          handlePromise(createPromise(count, delay + (count - 1) * step));\n        }\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        count++;\n        if (count <= amount) {\n          handlePromise(createPromise(count, delay + (count - 1) * step));\n        }\n      });\n  }\n  handlePromise(createPromise(count, refs.delay));\n})\nfunction createPromise(position, delay) {\n\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay })\n      } else {\n        reject([{ position, delay }])\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","$47d4ff9957288465$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","parseInt","value","count","handlePromise","promise","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.e826e635.js.map"}