{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACMC,EAAO,CACXC,KAAMC,SAASC,cAAc,QAC7BC,MAAOF,SAASC,cAAc,wBAC9BE,KAAMH,SAASC,cAAc,wBAC7BG,OAAQJ,SAASC,cAAc,2BA8BjC,SAASI,EAAcC,EAAUJ,GAE/B,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEF,WAAUJ,UAEpBO,EAAO,CAAC,CAAEH,WAAUJ,U,GAErBA,E,IArCPJ,EAAKC,KAAKe,iBAAiB,UAAU,SAACC,GACpCA,EAAIC,iBACeC,SAASnB,EAAKI,MAAMgB,OACrBD,SAASnB,EAAKK,KAAKe,OACjBD,SAASnB,EAAKM,OAAOc,OAFzC,IAIIC,EAAQ,GAEZ,SAASC,EAAcC,GACrBA,EACGC,MAAK,SAAAC,G,IAAGjB,EAAQiB,EAARjB,SAAUJ,EAAKqB,EAALrB,MACjBsB,EAAA5B,GAAS6B,OAAOC,QAAQ,uBAAwCC,OAAfrB,EAAS,QAAYqB,OAANzB,EAAM,SACpEiB,GACWf,QACXgB,EAAcf,EAAcc,EAAOjB,GAASiB,EAAQ,GAAKhB,M,IAG5DyB,OAAM,SAAAL,G,IAAGjB,EAAQiB,EAARjB,SAAUJ,EAAKqB,EAALrB,MAClBsB,EAAA5B,GAAS6B,OAAOI,QAAQ,sBAAqCF,OAAfrB,EAAS,QAAYqB,OAANzB,EAAM,SACnEiB,GACarB,EAAKM,QAChBgB,EAAcf,EAAcc,EAAOjB,GAASiB,EAAQ,GAAKhB,M,IAIjEiB,CAAcf,EAAcc,EAAOrB,EAAKI,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst refs = {\n  form: document.querySelector('form'),\n  delay: document.querySelector('input[name =\"delay\"]'), \n  step: document.querySelector('input[name = \"step\"]'),\n  amount: document.querySelector('input[name = \"amount\"]'),\n}\n\nrefs.form.addEventListener('submit', (evt) => {\n  evt.preventDefault()\n  const delayValue = parseInt(refs.delay.value);\n  const stepValue = parseInt(refs.step.value);\n  const amountValue = parseInt(refs.amount.value);\n  const promises = [];\n  let count = 1;\n\n  function handlePromise(promise) {\n    promise\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        count++;\n        if (count <= amount) {\n          handlePromise(createPromise(count, delay + (count - 1) * step));\n        }\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        count++;\n        if (count <= refs.amount) {\n          handlePromise(createPromise(count, delay + (count - 1) * step));\n        }\n      });\n  }\n  handlePromise(createPromise(count, refs.delay));\n})\nfunction createPromise(position, delay) {\n\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay })\n      } else {\n        reject([{ position, delay }])\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","parseInt","value","count","handlePromise","promise","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.d1856c36.js.map"}